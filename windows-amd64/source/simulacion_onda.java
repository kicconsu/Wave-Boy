/* autogenerated by Processing revision 1293 on 2023-11-03 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.awt.Font;
import java.awt.*;
import ddf.minim.*;
import g4p_controls.*;
import java.text.DecimalFormat;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class simulacion_onda extends PApplet {

// algo



// Sonidos


Minim minim;
AudioPlayer player;
AudioPlayer ring;
AudioSample bombo;
AudioSample btn;
AudioSample btn2;
AudioSample verifi;
AudioSample alarm;

// GUI


// Formato Decimal


// Timer
Timer startTimer;
TimerPuntaje startTimerPuntaje;

// Imagenes

int pum, pumindex = 0, bor, ampindex = 0, tensindex = 0, menuindex =  0;

PImage fondo, mano, manoindice, pantalla, menu, CSJ1, CSJ2, CSJ3,
  frecConst, rod, pun, mod, fondo_armo, userGUI, ldb;

PImage [] gif_menu = new PImage[6];
PImage [] gif_frec_2 =  new PImage[5];
PImage [] gif_frec_1 = new PImage[5];
PImage [] gif_amp = new PImage[14];
PImage [] gif_tens = new PImage[8];
PImage [] gif_niu = new PImage[5];

DecimalFormat df = new DecimalFormat("#.00");
DecimalFormat xd = new DecimalFormat("#0.00");
DecimalFormat dfT = new DecimalFormat("#0.0");
DecimalFormat dfP = new DecimalFormat("#0000");

// Variables Globales

int[][] cuerda;
int[][] cuerdaS;

int[] inY, reY, cuerdaC;

int cpfinal = 0000;

float tens, frec, amp, niu, theta = 0, damp = 0;

int pMax = 65, seg=0, xInicial=100, pointRadius=20, lon,
  puntaje=0000, mostInci=1, mostRefl=1, b, aux, armo;

int p, val_timep = 0, auxtimeI, suma = 0;

float Time, Time2;

float lamb, vel, frecang, k, onInc=0, currentTime = 0, sim_speed = 1, max_dt = (1.0f/60.0f)*1000;
 
//Modo Juego

int pointRadiusS;

float masS, tensS, frecS, ampS, niuS, lamS, velS, frecangS, kS, auxniuS; // Onda Estacionaria Simulada

// LeaderBoard
int pI = 3, pos = 0;

String[][] UserNScore = new String [2][500];

String auxPuntaje = "";

// TOP 3



// Boton Apagado Prendido

int ApagadoInc = 1, ApagadoRef = 1;

int vv=0, r=0, rr=0, c=0;

String au;


public void setup() { // Tamaño del programa e inicializaciones de variables
  /* size commented out by preprocessor */;

  loadMedia();

  setupSimWave();
  setupGameWave();
  setupGameVariables();

  createGUI();

  ring.play();

  Simu.setVisible(false);
  Instru.setVisible(false);
  Juego.setVisible(false);
  Puntaje.setVisible(false);
  Ayuda.setVisible(false);
  Modos.setVisible(false);
  Normales.setVisible(false);
  UserGUI.setVisible(false);
  Leaderboard.setVisible(false);

  Simu.noLoop();
  Instru.noLoop();
  Juego.noLoop();
  Puntaje.noLoop();
  Ayuda.noLoop();
  Modos.noLoop();
  Normales.noLoop();
  UserGUI.noLoop();
  Leaderboard.noLoop();
  
  UserNScore[0][0]="JDR_King";
  UserNScore[1][0]="1500";

  UserNScore[0][1]="FatiGod";
  UserNScore[1][1]="1250";

  UserNScore[0][2]="Crymuel";
  UserNScore[1][2]="2";
  
  for(int i = 3; i<500; i++){
    UserNScore[0][i]="Jugador No."+(i+1);
    UserNScore[1][i]="0";

  }
  

}

public void draw() {
  // GUI
  indice();
  image(gif_menu[menuindex], 0, 0);
  if (Simu.isVisible()) {
    //Subrutina de calculos de simulacion -- realizada en intervalos regulares
    float deltaTime = getFrameTime(currentTime);
    //float dt_min = (1.0/(60.0*sqrt(tens/niu)*sim_speed));

    currentTime = millis();


    while (deltaTime > 0) {
      float time_step = min(new float[]{deltaTime, max_dt});
      oscilateSim(sim_speed);
      refresh();
      deltaTime-= time_step;
    }
  } else if (Juego.isVisible()) {
    //Subrutina del calculo de la onda del jugador
    gameWaveRefresh();
    //Subrutina del calculo de la onda de la computadora
    gameWaveSimulada();
  }
}
public void setupSimWave() { // SETUP DE LA SIMULACION DE LA ONDA

  //se rellena el vector de cuerda principal
  //cada elemento es un vector que contiene [posX, posY]
  cuerda = new int[pMax][2];
  inY = new int[pMax]; // vector desplazamientos de la cuerda en t-1
  reY = new int[pMax]; // vector desplazamientos de la cuerda en t+1
  cuerdaC = new int[pMax]; // vector desplazamientos de la cuerda en t

  cuerda[0] = new int[]{xInicial, 0};
  cuerdaC[0] = cuerda[0][1]; //cuerdaC y cuerda[i][1] siempre son iguales
  //reY[0] = 0;
  inY[0] = 0; //inicializacion en 0 necesaria para todos los vectores

  for (int i = 1; i<pMax; i++) {
    int previousX = cuerda[i-1][0];
    cuerda[i] = new int[]{previousX+pointRadius, 0};
    cuerdaC[i] = cuerda[0][1];
    inY[i] = 0;
    //reY[i] = 0;
    //se inicializa la cuerda tensa de forma recta, en la mitad de la pantalla
  }
}

public void setupGameWave() {// SETUP DEL JUEGO DE LA SIMULACION DE LA ONDA

  cuerdaS = new int[pMax][2];
  cuerdaS[0] = new int[]{xInicial, height/2};

  for (int i = 1; i<pMax; i++) {
    int previousX = cuerda[i-1][0];
    cuerdaS[i] = new int[]{previousX+pointRadius, 0};
    //se inicializa la cuerda tensa de forma recta, en la mitad de la pantalla
  }
}

public void setupSimVariables() { // INICIALIZACION DE VARIABLES DE LA FRECUENCIA LIBRE

  frec = 0;
  amp = 0;
  lon = 1;

  amp_sl.setValue(1);
  frec_sl.setValue(1);
  lon_sl.setValue(1);
}

public void setupNormalesVariables() { // INICIALIZACION DE VARIABLES DE MODO NORMAL

  armo = armo_sl.getValueI();
  tens = tens_sl_2.getValueF();
  niu = dens_sl_2.getValueF();
  amp = amp_sl_2.getValueF();
  lon = 40;
  pointRadius = 20;
}

public void setupGameVariables() {
  startTimer = new Timer(35);
  puntaje = 0000;


  pointRadius = 20;
  niuS=(int)random(20, 70);
  niuS/=100;
  frecS=1.5f;
  tensS=(int)random(7, 35);
  ampS=(int)random(4, 9)*10;

  cpfinal=0000;

  niu=0.3f;
  frec=1.5f;
  tens=1;
  amp=5;
  lon = 50;

  // Point Radius Simulada definida por la densidad lineal

  pointRadiusS = calcRadius(niuS);
}



public void refresh() { // SUBRUTINA PARA LA ACTUALIZACION DE LA FRECUENCIA LIBRE
  float vel = 1;
  float dt = 1;
  float dx = dt*vel;

  float aceleracion = 1/((damp*dt/2)+1);
  float C = vel*(dt/dx), Csq = C*C;

  //Condiciones de la ecuacion
  inY[0] = cuerda[0][1];
  cuerda[lon-1][1] = 0;
  cuerdaC[lon-1] = 0;

  for (int i=1; i<lon-1; i++) {
    reY[i] = (int) (aceleracion * ( ( (damp*dt/2) - 1 ) * inY[ i ] + (2*(1-Csq)) * cuerdaC[ i ] + Csq * ( cuerdaC[ i + 1 ] + cuerdaC[ i - 1 ] ) ));
    //a * ( ( beta - 1 ) * yPasada[ i ] + c * yActual[ i ] + alphaSq * ( yActual[ i + 1 ] + yActual[ i - 1 ] ) )
    //Implementacion original

    ////aceleracion * ( ( (amort*dt/2) - 1 ) * yPasada[ i ] + (2*(1-Csq)) * yActual[ i ] + Csq * ( yActual[ i + 1 ] + yActual[ i - 1 ] ) )
    //Implementacion empleada

    //implementacion de la ecuacion de onda sacada de la universidad de colorado:
    //https://github.com/phetsims/wave-on-a-string/tree/main
  }

  int oldNext = reY[lon-1];

  int[] old = inY;
  inY = cuerdaC;
  cuerdaC = reY;
  reY = old;

  inY[lon-1] = 0;
  cuerdaC[lon-1] = 0;
  reY[lon-1] = oldNext;

  //Manejo de vectores implementado por la universidad de colorado
  //Actualiza los datos de cada vector de estados: el vector actual pasa a ser el antiguo,
  //el nuevo pasa a ser el actual...
  //las variables old son auxiliares

  for (int i = 0; i<lon; i++) {
    cuerda[i][1] = cuerdaC[i];
  }
  //Se pasan los datos del vector actual a la matriz para ser dibujada
}

public void oscilateSim(float sim_speed) { // SUBRUTINA OSCILADOR DE FRECUENCIA LIBRE

  frecang = TWO_PI*frec;

  int onInc = (int)(amp*Math.sin(Math.toRadians(theta)));
  theta=(theta+frecang*sim_speed);

  cuerda[0][1] = onInc;
  cuerdaC[0] = onInc;
  //cuerdaC[1] = onInc;
}

public float getFrameTime(float currentTime) { // OBTIENE EL TIEMPO
  float newTime = millis();
  float frameTime = newTime-currentTime;
  return frameTime;
}

public void dataScreen(GWindow window) { // MUESTRA  LA INFORMACION EN PANTALLA
  // GUI

  window.image(pantalla, 1050, 245);

  PFont f = createFont("Georgia", 16);
  window.textFont(f);
  window.textSize(16);

  String s = "         Lambda:\n        λ(m): "+df.format(lamb);

  window.text(s, 1085, 320);

  String a = " Vel. Propagacion:\n        v(m/s): "+df.format(vel);

  window.text(a, 1085, 370);
}

public void drawSim(GWindow window) { // DIBUJA LAS ONDAS EN FRECUENCIA LIBRE

  //grafica de cuerda tensionada
  strokeWeight(2);

  for (int i=0; i<lon; i++) { // Visualizacion de las elipses que representan las funciones
    int[] punto = cuerda[i]; // Igualacion de vectores
    if (i>0) { //lineas entre puntos
      int[] previous = cuerda[i-1];
      window.fill(255);
      window.line(punto[0], punto[1]+height/2, previous[0], previous[1]+height/2);
    }

    window.fill(255, 0, 0);
    window.ellipse(punto[0], inY[i]+height/2, (pointRadius-5)*mostInci, (pointRadius-5)*mostInci);

    window.fill(0, 0, 255);
    window.ellipse(punto[0], reY[i]+height/2, (pointRadius-5)*mostRefl, (pointRadius-5)*mostRefl);

    window.fill(255);
    window.ellipse(punto[0], punto[1]+height/2, pointRadius, pointRadius);
    window.image(mano, cuerda[lon][0]-15, (height/2)-110);
  }
  //grafica de generador de frecuencia
  window.image(manoindice, 28, cuerda[0][1]+7+height/2);

  strokeWeight(10);
}

public void drawNorm() { // DIBUJA LAS ONDAS EN MODO NORMAL

  //grafica de cuerda tensionada
  strokeWeight(2);

  for (int i=0; i<lon; i++) { // Visualizacion de las elipses que representan las funciones
    int[] punto = cuerda[i]; // Igualacion de vectores
    if (i>0) { //lineas entre puntos
      int[] previous = cuerda[i-1];
      Normales.fill(255);
      Normales.line(punto[0], punto[1]+height/2, previous[0], previous[1]+height/2);
    }

    Normales.fill(255, 0, 0);
    Normales.ellipse(punto[0], inY[i]+height/2, (pointRadius-5)*mostInci, (pointRadius-5)*mostInci);

    Normales.fill(0, 0, 255);
    Normales.ellipse(punto[0], reY[i]+height/2, (pointRadius-5)*mostRefl, (pointRadius-5)*mostRefl);

    Normales.fill(255);
    Normales.ellipse(punto[0], punto[1]+height/2, pointRadius, pointRadius);
    Normales.image(mano, cuerda[lon][0]-15, (height/2)-110);
  }
  //grafica de generador de frecuencia
  strokeWeight(10);
}

public int calcpunt(int aux, Boolean ampli) { // CALCULO DEL PUNTAJE
  int sum = 0;
  if (aux>=0 && aux<=20) { // El aux es definido por el valor absoluto previamente calculado del intervalo
    if (aux==0) { // Si lo hizo perfecto
      if (ampli) {
        sum+=20;
      } else {
        sum+=150;
        val_timep+=5;
        limiteTiempo();
      }
    } else if (aux>0&&aux<6 ) { // Si lo hizo en un margen casi bueno
      if (ampli) {
        sum+=15;
      } else {
        sum+=90+aux*10;
        val_timep+=3;
        limiteTiempo();
      }
    } else if (aux>=6 && aux<11) { // Si lo hizo en un margen normal
      if (ampli) {
        sum+=10;
      } else {
        sum+=75;
        val_timep+=2;
        limiteTiempo();
      }
    } else if (aux>=11 && aux<16) { // Si lo hizo en un margen malo
      if (ampli) {
        sum+=5;
      } else {
        sum+=25;
        val_timep+=1;
        limiteTiempo();
      }
    } else if (aux>=16) { // :skull:
      if (ampli == false) {
        sum+=10;
      }
    }
    suma+=val_timep;
    Time+=val_timep;

    int dec = (int)random(0, 2);
    switch(dec) {
    case 0:
      niuS=(int)random(50, 70);
      niuS/=100;
      tensS=(int)random(5, 15);
      ampS=(int)random(5, 6)*10;
      break;

    case 1:
      niuS=(int)random(20, 35);
      niuS/=100;
      tensS=(int)random(15, 25);
      ampS=(int)random(7, 9)*10;
      break;

    case 2:
      niuS=(int)random(35, 50);
      niuS/=100;
      tensS=(int)random(25, 35);
      ampS=(int)random(6, 8)*10;
      break;
    }

    pointRadiusS = calcRadius(niuS);
  }

  return sum;
}

public int calcRadius(double dens) { // Calculo del radio dependiendo de la densidad lineal, a mayor D.L. menor es el radio y viceversa
  int aux = (int)(dens*100);
  int radio = 0;

  if (aux>=0&&aux<10) { // Rango de 10 a 19
    radio=26;
  } else if (aux>=10&&aux<20) { // Rango de 10 a 19
    radio=24;
  } else if (aux>=20&&aux<30) { // Rango de 20 a 29
    radio=22;
  } else if (aux>=30&&aux<40) { // Rango de 30 a 39
    radio=20;
  } else if (aux>=40&&aux<50) { // Rango de 40 a 49
    radio=18;
  } else if (aux>=50&&aux<60) { // Rango de 50 a 59
    radio=16;
  } else if (aux>=60&&aux<=75) { // Rango de 60 a 70
    radio=14;
  }

  return radio;
}

public void gameWaveSimulada() { // CALCULO DE LA ONDA DE LA COMPUTADORA


  velS=sqrt((float)(tensS/ niuS));

  lamS=velS/frecS;

  kS =((float)(2*Math.PI))/lamS;

  frecangS=velS * kS;


  for (int i=0; i<lon; i++) {
    double onda;

    onda =(int) (ampS * Math.sin(Math.toRadians(kS*(cuerdaS[lon-1-i][0]-xInicial)))*Math.sin(Math.toRadians(frecangS*frameCount)));

    cuerdaS[i][1] = (int) onda + height/2;
  }
}

public void gameWaveRefresh() { // CALCULO DE LA ONDA DEL JUGADOR

  frec=frecS;
  //g/m
  vel=sqrt((float) (tens/ niu));
  //m/s
  lamb=vel/frec;
  //lamb = m
  k = ((float)(2*Math.PI))/lamb;
  //k = rad/m
  frecang=vel * k;
  //w = m/s * rad/m
  //w = rad/s
  //se calculan los valores de las propiedades como visto en el enunciado y libro guia

  for (int i=0; i<lon; i++) {
    // A(senkx)senwt
    double onda;

    onda = (int)(amp * Math.sin(Math.toRadians(k*(cuerda[lon-i-1][0]-xInicial)))*Math.sin(Math.toRadians(frecang*frameCount)));

    cuerda[i][1] = (int) onda + height/2;
  }
}


public void gameDrawGUI() { // INTERFAZ GRAFICA EN LA PANTALLA DEL JUEGO

  // Timer
  startTimer.countDown();

  if (Time<=0) { // Cuando el tiempo es

    UserNScore[1][pI] = String.valueOf(puntaje);
    auxPuntaje = String.valueOf(puntaje);

    startTimer.countUp();
    Juego.noLoop();
    Juego.setVisible(false);

    Puntaje.setVisible(true);
    Puntaje.loop();
  }


  // GUI
  Juego.image(frecConst, 0, 0);

  Juego.image(manoindice, 28, cuerda[0][1]+7);

  // Strings en pantalla, puntaje, tiempo, lambdas y velocidades

  PFont f = createFont("Calibri Bold", 16);
  Juego.textFont(f);
  Juego.textSize(16);

  String s = ""+df.format(velS);

  Juego.text(s, 220, 145);

  String a = ""+df.format(lamS);

  Juego.text(a, 220, 170);

  String d = ""+df.format(vel);

  Juego.text(d, 430, 145);

  String e = ""+df.format(lamb);

  Juego.text(e, 430, 170);

  Juego.textSize(40);

  String pun = ""+dfP.format(puntaje);

  Juego.text(pun, 1070, 120);

  // Borrar los puntos luego de que pasen 3 segundos

  if (b==1) {

    startTimerPuntaje.countDownP();

    Juego.text("+"+aux, 1070, 170);

    Juego.text("+"+suma, 835, 170);

    if (startTimerPuntaje.getTime()<=0) {

      suma = 0;
      val_timep=0;

      Juego.fill(31, 69, 40);

      Juego.noStroke();

      Juego.rect(1070, 140, 100, 32);
      Juego.rect(835, 140, 70, 32);

      Juego.fill(255);

      startTimerPuntaje.countUpP();
    }
  }

  // Switch solo para cambiar el color


  auxtimeI=(int)(Time*100);

  switch((int)Time) {
  case 10:
  case 8:
  case 6:
  case 4:
  case 2:
  case 0:
    Juego.fill(255, 0, 0);
    break;
  }

  // Switch para escuchar un sonido de alarma al final
  switch(auxtimeI) {
  case 1100:
  case 900:
  case 700:
  case 500:
  case 300:
  case 100:
    alarm.trigger();
    break;
  }

  String st = ""+dfT.format(startTimer.getTime());

  Juego.text(st, 835, 120);
  Juego.fill(255);
}

public void gameWavesDraw() { // DIBUJO DE LAS ONDAS DEL JUEGO TANTO DEL JUGADOR COMO DE LA COMPUTADORA

  // Variable Point Radius dependiendo de la densidad lineal

  calcRadius(niu);

  //grafica de cuerda tensionada
  strokeWeight(2);

  for (int i=0; i<lon; i++) { // Visualizacion de las elipses que representan las funciones
    int[] punto = cuerda[i];
    int[] puntoS = cuerdaS[i];
    // Igualacion de vectores
    if (i>0) { //lineas entre puntos
      int[] previous = cuerda[i-1];
      int[] previouS = cuerdaS[i-1];

      Juego.stroke(243, 159, 90);
      Juego.line(puntoS[0], puntoS[1], previouS[0], previouS[1]);
      Juego.stroke(255);
      Juego.line(punto[0], punto[1], previous[0], previous[1]);
      Juego.stroke(0);
    }

    // Simulacion
    Juego.fill(144, 144, 144);

    Juego.ellipse(puntoS[0], puntoS[1], pointRadiusS, pointRadiusS);
    // Original

    Juego.fill(255);

    Juego.ellipse(punto[0], punto[1], pointRadius, pointRadius);
  }

  strokeWeight(10);
}

public void jugar() { // INICIALIZA TODAS LAS SUBRUTINAS CUANDO SE VA A LA VENTANA JUGAR

  setupGameVariables();
  setupSimWave();
  setupGameWave();

  startTimer.countDown();
  Juego.loop();
  Juego.setVisible(true);
}


public void indice() { // CALCULO DEL INDICE DEL GIF
  bor = frameCount - p;
  if (bor>=8) {
    p = frameCount;
    pumindex = (pumindex+1)%gif_frec_2.length;
    ampindex = (ampindex+1)%gif_amp.length;
    tensindex = (tensindex+1)%gif_tens.length;
    menuindex = (menuindex+1)%gif_menu.length;
  }
}

public void loadMedia() { // SE CARGA TODOS LOS ARCHIVOS NECESARIOS PARA EL PROGRAMA
  // Audio
  minim = new Minim(this);

  player = minim.loadFile("camargopff.wav");
  bombo = minim.loadSample("BD.mp3", 512);
  btn = minim.loadSample("boton.wav", 250);
  btn2 = minim.loadSample("boton2.wav", 250);
  ring = minim.loadFile("ring.wav");
  verifi = minim.loadSample("verifie.wav");
  alarm = minim.loadSample("sonidoalarm.wav");

  // Imagenes
  frecConst = loadImage("frecConst.png");
  fondo = loadImage("Ondas.png");
  mano = loadImage("mano.png");
  manoindice = loadImage("manoindice.png");
  pantalla = loadImage("pantalla.png");
  menu= loadImage("menu.png");
  CSJ1= loadImage("CSJ1.png");
  CSJ2= loadImage("CSJ2.png");
  CSJ3= loadImage("CSJ3.png");
  pun = loadImage("puntaje.png");
  rod= loadImage("lambda.png");
  mod= loadImage("modos.png");
  fondo_armo= loadImage("fondo_armonico.png");
  userGUI = loadImage("user.png");
  ldb = loadImage("leaderboard.png");

  // Gifs
  for (pum=0; pum<5; pum++) {
    gif_frec_1[pum] = loadImage("ayudaf"+pum+".png");
    gif_frec_2[pum] = loadImage("ayudafrec"+pum+".png");
    gif_niu[pum] = loadImage("ayudad"+pum+".png");
  }
  for (pum = 0; pum<14; pum++) {
    gif_amp[pum]= loadImage("ayudaA"+pum+".png");
  }
  for (pum = 0; pum<8; pum++) {
    gif_tens[pum] = loadImage("ayudat"+pum+".png");
  }
  for (pum = 0; pum<6; pum++) {
    gif_menu[pum] = loadImage("menu"+pum+".png");
  }
}

public void limpiar() { // Limpia los text areas en el Juego para que no se muestren con los valores anteriores
  Juego.noStroke();
  Juego.fill(31, 69, 40);

  Juego.rect(1070, 140, 100, 32);
  Juego.rect(835, 140, 70, 32);

  t_amp.setText("5.0");
  t_niu.setText("0.3");
  t_tens.setText("1.0");
}

public void limiteTiempo() { // Se crea una subrutina reutilizable para el limite de tiempo asignado en el Juego (45)
  if (Time>=31) {
    val_timep=(int)(40-Time);
  }
}



public void NormalWaveRefresh() { // ACTUALIZACION DE LA ONDA DE MODO NORMAL

  // Longitud Constante y Frecuencia Calculada
  lon = 40;
  vel = sqrt(tens/niu);
  lamb= ((float) (2*lon)/ (float) (armo));
  frec = vel/lamb;
  k = 3*((TWO_PI)/lamb);
  frecang = TWO_PI*frec;

  for (int i = 0; i<lon; i++) {//propagar onda incidente, se mueve de izq. a derecha
    double onInc = (amp * Math.sin(Math.toRadians(k*(cuerda[lon-i-1][0]-xInicial)
      + frecang*(millis()))));
    inY[i] = (int) onInc;

    double onRef = (amp * Math.sin(Math.toRadians(k*(cuerda[lon-i-1][0]-xInicial) -
      frecang*(millis()))));
    reY[i] = (int) onRef;

    int onda = (int)(onInc + onRef);

    cuerda[i][1] = onda;
  }
}

public void leaderboard() {
  String top1, top2, top3, top_pI, top, p1, p2, p3, p_pI, p;

  PFont f = createFont("Calibri Bold", 50);
  Leaderboard.textFont(f);
  Leaderboard.textSize(50);

  top1=UserNScore[0][0];
  top2=UserNScore[0][1];
  top3=UserNScore[0][2];
  top_pI=UserNScore[0][pI];
  top=UserNScore[0][pos];

  p1=UserNScore[1][0];
  p2=UserNScore[1][1];
  p3=UserNScore[1][2];
  p_pI=UserNScore[1][pI];
  p=UserNScore[1][pos];

  Leaderboard.text("1. "+top1, 340, 267);
  Leaderboard.text("2. "+top2, 340, 353);
  Leaderboard.text("3. "+top3, 340, 437);
  Leaderboard.text(""+(pI+1)+". "+top_pI, 340, 540);

  Leaderboard.text(""+p1, 800, 267);
  Leaderboard.text(""+p2, 800, 353);
  Leaderboard.text(""+p3, 800, 437);
  Leaderboard.text(""+p_pI, 800, 540);

  PFont s = createFont("Calibri Bold", 24);
  Leaderboard.textFont(s);
  Leaderboard.textSize(24);

  Leaderboard.text(""+(pos+1)+". "+top, 1040, 630);
  Leaderboard.text(""+p, 1040, 680);
}

public int calcTime(int aux) {

  return aux;
}
class Timer {
  

  Timer(float set) { // Constructor cuando creas un nuevo timer
    Time = set;
  }

  public float getTime() { // te da el tiempo actual
    return(Time);
  }

  public void setTime(float set) { // Le doy un valor cualquiera al timer
    Time = set;
  }
  public void countUp() { // Actualiza el timer contando hacia abajo, trabaja llamandose desde void draw() para que trabaje
    Time += 0.5f/frameRate;
  }
  public void countDown() { // Actualiza el timer contando hacia abajo, trabaja llamandose desde void draw() para que trabaje
    Time -= 0.5f/frameRate;
  }
  public void countSum5() { //
    Time+=5;
  }
  public void countSum4() { //
    Time+=4;
  }
  public void countSum3() { //
    Time+=3;
  }
  public void countSum2() { //
    Time+=2;
  }
}

class TimerPuntaje {

  

  TimerPuntaje(float set) { // Constructor cuando creas un nuevo timer
    Time2 = set;
  }
  public float getTime() { // te da el tiempo actual
    return(Time2);
  }
  
  public void countUpP() { // Actualiza el timer contando hacia abajo, trabaja llamandose desde void draw() para que trabaje
    Time2 += 0.5f/frameRate;
  }
  public void countDownP() { // Actualiza el timer contando hacia abajo, trabaja llamandose desde void draw() para que trabaje
    Time2 -= 0.5f/frameRate;
  }
  
}
/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.
 
 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
 // It is safe to enter your event code here
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void bsim_click(GImageButton source, GEvent event) { //_CODE_:imgButton1:562624:
  bombo.trigger();

  getSurface().setVisible(false);
  Modos.setVisible(true);
  Modos.loop();
} //_CODE_:imgButton1:562624:

public void bplay_click(GImageButton source, GEvent event) { //_CODE_:imgButton2:869295:
  bombo.trigger();
  getSurface().setVisible(false);

  UserGUI.loop();
  UserGUI.setVisible(true);
} //_CODE_:imgButton2:869295:

public void ayuda_click1(GImageButton source, GEvent event) { //_CODE_:ayuda:414475:
  bombo.trigger();
  getSurface().setVisible(false);
  Ayuda.loop();
  Ayuda.setVisible(true);
} //_CODE_:ayuda:414475:

synchronized public void simu_draw(PApplet appc, GWinData data) { //_CODE_:Simu:296752:

  if (Simu.isVisible()) {
    //fondo
    Simu.image(fondo, 0, 0);
    //Subrutina para visualizar puntos e imagenes
    drawSim(Simu);
  }
} //_CODE_:Simu:296752:

public void frecuencia_sl(GCustomSlider source, GEvent event) { //_CODE_:frec_sl:827075:
  frec=frec_sl.getValueF();
} //_CODE_:frec_sl:827075:

public void longitud_sl(GCustomSlider source, GEvent event) { //_CODE_:lon_sl:943122:
  lon=lon_sl.getValueI();
} //_CODE_:lon_sl:943122:

public void amplitud_sl(GCustomSlider source, GEvent event) { //_CODE_:amp_sl:324721:
  amp=amp_sl.getValueF();
} //_CODE_:amp_sl:324721:

public void mostInc(GImageToggleButton source, GEvent event) { //_CODE_:mostIncid:447650:
  btn2.trigger();
  if (mostInci==1) {
    mostInci=0;
  } else {
    mostInci=1;
  }
} //_CODE_:mostIncid:447650:

public void mostRefe(GImageToggleButton source, GEvent event) { //_CODE_:mostRefle:899898:
  btn2.trigger();
  if (mostRefl==1) {
    mostRefl=0;
  } else {
    mostRefl=1;
  }
} //_CODE_:mostRefle:899898:

public void simu_to_menu(GImageButton source, GEvent event) { //_CODE_:menuuu:849836:
  bombo.trigger();
  frameRate(60);
  getSurface().setVisible(true);
  Simu.setVisible(false);
  Simu.noLoop();
} //_CODE_:menuuu:849836:

public void pausa_simu(GImageButton source, GEvent event) { //_CODE_:pau:223520:
  btn2.trigger();
  Simu.noLoop();
  despau.setVisible(true);
  pau.setVisible(false);
} //_CODE_:pau:223520:

public void b_reset_sim(GImageButton source, GEvent event) { //_CODE_:reset:808422:
  btn2.trigger();
  theta = 0;
  setupSimWave();
} //_CODE_:reset:808422:

public void despau_simu(GImageButton source, GEvent event) { //_CODE_:despau:986299:
  btn2.trigger();
  Simu.loop();
  despau.setVisible(false);
  pau.setVisible(true);
} //_CODE_:despau:986299:

synchronized public void Instru_draw(PApplet appc, GWinData data) { //_CODE_:Instru:566139:
  try {
    Instru.image(CSJ1, 0, 0);
    b_jugar.setVisible(true);
    if (r==0) {
      izq.setVisible(false);
    }
    if (vv==1) {//Mostrar instrucciones 2
      Instru.image(CSJ2, 0, 0);
      der.setVisible(true);
      if (r==1||r==2) {
        izq.setVisible(true);
      }
    }
    if (vv==2) { //Mostrar instrucciones 3
      Instru.image(CSJ3, 0, 0);
      if (r==1||r==2) {
        izq.setVisible(true);
      }
      if (r==2) {
        der.setVisible(false);
      }
    }
    if (vv==0) { //Mostrar instrucciones 1
      Instru.image(CSJ1, 0, 0);
      izq.setVisible(false);
      der.setVisible(true);
    }
  }
  catch(NullPointerException e) {
  }
} //_CODE_:Instru:566139:

public void derecha(GImageButton source, GEvent event) { //_CODE_:der:361666:
  bombo.trigger();
  vv=vv+1;
  r=r+1;
} //_CODE_:der:361666:

public void izquierda(GImageButton source, GEvent event) { //_CODE_:izq:429881:
  bombo.trigger();
  vv=vv-1;
  r=r-1;
} //_CODE_:izq:429881:

public void gameplay_click1(GImageButton source, GEvent event) { //_CODE_:b_jugar:230791:
  bombo.trigger();
  Instru.setVisible(false);
  Instru.noLoop();
  jugar();
} //_CODE_:b_jugar:230791:

synchronized public void Juego_draw(PApplet appc, GWinData data) { //_CODE_:Juego:809167:
  Juego.background(230);
  //Subrutina para la interfaz del juego...
  gameDrawGUI();
  //Subrutina para el dibujo de las ondas
  gameWavesDraw();
} //_CODE_:Juego:809167:

public void DTension(GButton source, GEvent event) { //_CODE_:DecTension:400419:
  btn.trigger();
  if (tens>1) {
    tens--;
  }
  t_tens.setText(""+tens);
} //_CODE_:DecTension:400419:

public void textarea1_change1(GTextArea source, GEvent event) { //_CODE_:t_tens:712598:
} //_CODE_:t_tens:712598:

public void btens(GButton source, GEvent event) { //_CODE_:b_tens:291673:
  int val;
  val=Integer.valueOf(t_tens.getText());
  if (val>35||val<1) {
    t_tens.setText("Error");
  } else {
    tens=val;
    t_tens.setText(""+tens);
  }
} //_CODE_:b_tens:291673:

public void ITension(GButton source, GEvent event) { //_CODE_:IncTension:402883:
  btn.trigger();
  if (tens<35) {
    tens++;
  }
  t_tens.setText(""+tens);
} //_CODE_:IncTension:402883:

public void DNiu(GButton source, GEvent event) { //_CODE_:DecNiu:600833:
  btn.trigger();

  niu=(int)(niu*100);
  if (niu>1) {
    niu=(int)(niu-2);
  }
  niu/=100;

  t_niu.setText(""+niu);

  pointRadius = calcRadius(niu);
} //_CODE_:DecNiu:600833:

public void textarea1_change2(GTextArea source, GEvent event) { //_CODE_:t_niu:551398:
} //_CODE_:t_niu:551398:

public void bniu(GButton source, GEvent event) { //_CODE_:b_niu:335749:
  try {

    float val;
    val=Float.valueOf(t_niu.getText());
    if (val<0.00f||val>0.71f) {
      t_niu.setText("Error");
    } else {
      niu=val;
      t_niu.setText(""+niu);
    }
  }
  catch(Exception e) {
    t_niu.setText("Error");
  }
} //_CODE_:b_niu:335749:

public void INiu(GButton source, GEvent event) { //_CODE_:IncNiu:607898:
  btn.trigger();

  niu=(int)(niu*100);
  if (niu<71) {
    niu=(niu+5);
  }
  niu= niu/100;
  t_niu.setText(""+niu);

  pointRadius = calcRadius(niu);
} //_CODE_:IncNiu:607898:

public void DAmpl(GButton source, GEvent event) { //_CODE_:DecAmpl:704694:
  btn.trigger();
  if (amp>1) {
    amp-=1;
  }
  t_amp.setText(""+amp);
} //_CODE_:DecAmpl:704694:

public void textarea1_change3(GTextArea source, GEvent event) { //_CODE_:t_amp:868004:
} //_CODE_:t_amp:868004:

public void bamp(GButton source, GEvent event) { //_CODE_:b_amp:596782:
  try {
    int val;
    val=Integer.valueOf(t_amp.getText());

    if (val>100||val<1) {
      t_amp.setText("Error");
    } else {
      amp=val;
      t_amp.setText(""+amp);
    }
  }
  catch(Exception e) {
    t_niu.setText("Error");
  }
} //_CODE_:b_amp:596782:

public void IAmp(GButton source, GEvent event) { //_CODE_:IncAmpl:492180:
  btn.trigger();
  if (amp<100) {
    amp+=5;
  }
  t_amp.setText(""+amp);
} //_CODE_:IncAmpl:492180:

public void jugar_to_menu(GImageButton source, GEvent event) { //_CODE_:menuu:797945:
  bombo.trigger();
  limpiar();
  getSurface().setVisible(true);
  Juego.setVisible(false);
  Juego.noLoop();
} //_CODE_:menuu:797945:

public void verii(GImageButton source, GEvent event) { //_CODE_:verify:269262:

  // Se vienen cositas

  startTimerPuntaje = new TimerPuntaje(3);

  verifi.trigger();

  b=1;

  int I_vel, I_lamb, I_amp;

  I_vel = (int)(velS*100-vel*100);

  I_lamb = (int)(lamS*100-lamb*100);

  I_amp = (int)(ampS-amp);

  // Vel
  aux=calcpunt(Math.abs(I_vel), false)+calcpunt(Math.abs(I_lamb), false)+calcpunt(Math.abs(I_amp), true);

  puntaje+=aux;

  //
} //_CODE_:verify:269262:

synchronized public void Puntaje_draw(PApplet appc, GWinData data) { //_CODE_:Puntaje:227115:
  appc.background(230);
  Puntaje.image(pun, 0, 0);

  PFont f = createFont("Calibri Bold", 16);
  Puntaje.textFont(f);
  Puntaje.textSize(64);

  if (cpfinal<puntaje) {
    cpfinal+=1;
    player.play();
  } else if (cpfinal==puntaje) {
    player.pause();
  }


  String puntAlcanzado = ""+dfP.format(cpfinal);
  Puntaje.text(puntAlcanzado, 600, 420);
} //_CODE_:Puntaje:227115:

public void punt_to_menu(GImageButton source, GEvent event) { //_CODE_:b_menuPuntaje:480354:
  pI++;
  player.pause();
  bombo.trigger();
  limpiar();
  Puntaje.setVisible(false);
  Puntaje.noLoop();
  getSurface().setVisible(true);
} //_CODE_:b_menuPuntaje:480354:

public void jugarPuntaje(GImageButton source, GEvent event) { //_CODE_:b_jugarPuntaje:835823:
  bombo.trigger();
  player.pause();
  limpiar();
  Puntaje.setVisible(false);
  Puntaje.noLoop();
  jugar();
} //_CODE_:b_jugarPuntaje:835823:

public void pun_to_ldb(GImageButton source, GEvent event) { //_CODE_:b_ldb:349860:
  player.pause();
  bombo.trigger();
  limpiar();

  // ordenamiento todo joperico xddddddd

  int a1, a2, a3, t=0, tt = 1;
  String b1, b2, b3;

  for (int i = 0; i<499; i++) {
    for (int j = 1; j<499-i; j++) {

      a1 = Integer.valueOf(UserNScore[1][j]);
      a2 = Integer.valueOf(UserNScore[1][j+1]);

      b1 = UserNScore[0][j];
      b2 = UserNScore[0][j+1];

      if (a1<a2) {

        a3=a1;
        UserNScore[1][j]=String.valueOf(a2);
        UserNScore[1][j+1]=String.valueOf(a3);

        b3=b1;
        UserNScore[0][j]=b2;
        UserNScore[0][j+1]=b3;
      }
    }
  }

  while (t<499 && tt == 1) {

    if (Integer.valueOf(UserNScore[1][t]) == Integer.valueOf(auxPuntaje)) {
      pos = t;
      tt = 2;
    }

    t++;
  }





  Puntaje.setVisible(false);
  Puntaje.noLoop();

  Leaderboard.setVisible(true);
  Leaderboard.loop();
} //_CODE_:b_ldb:349860:

synchronized public void help_draw1(PApplet appc, GWinData data) { //_CODE_:Ayuda:467491:

  Ayuda.background(230);
  if (c==0) {

    izqui.setVisible(false);
  }
  switch(rr) {
  case 0:
    // Mostrar ayuda Slide 1
    indice();
    Ayuda.image(gif_frec_1[pumindex], 0, 0);
    izqui.setVisible(false);
    dere.setVisible(true);
    break;
  case 1:
    // Mostrar ayuda Slide 2
    dere.setVisible(true);
    if (c==1||c==2) {
      izqui.setVisible(true);
    }
    //GIF
    indice();
    Ayuda.image(gif_frec_2[pumindex], 0, 0);
    Ayuda.image(rod, 750, 20);
    break;
  case 2:
    // Mostrar ayuda Slide 3
    indice();
    Ayuda.image(gif_amp[ampindex], 0, 0);
    if (c==1||c==2) {
      izqui.setVisible(true);
      dere.setVisible(true);
    }
    break;
  case 3:
    // Mostrar ayuda Slide 4
    indice();
    Ayuda.image(gif_tens[tensindex], 0, 0);
    if (c==1||c==2||c==3) {
      izqui.setVisible(true);
      dere.setVisible(true);
    }
    break;
  case 4:
    // Mostrar ayuda Slide 5
    indice();
    Ayuda.image(gif_niu[pumindex], 0, 0);
    if (c==4) {
      izqui.setVisible(true);
      dere.setVisible(false);
    }
    break;
  }
} //_CODE_:Ayuda:467491:

public void derecha_click1(GImageButton source, GEvent event) { //_CODE_:dere:931589:
  bombo.trigger();
  rr=rr+1;
  c=c+1;
} //_CODE_:dere:931589:

public void izquierda_click1(GImageButton source, GEvent event) { //_CODE_:izqui:913286:
  bombo.trigger();
  rr=rr-1;
  c=c-1;
} //_CODE_:izqui:913286:

public void ayud_to_menu(GImageButton source, GEvent event) { //_CODE_:menub:418414:
  bombo.trigger();
  Ayuda.setVisible(false);
  Ayuda.noLoop();
  getSurface().setVisible(true);
} //_CODE_:menub:418414:

synchronized public void Modos_draw(PApplet appc, GWinData data) { //_CODE_:Modos:859405:
  Modos.image(mod, 0, 0);
} //_CODE_:Modos:859405:

public void mod_normal(GImageButton source, GEvent event) { //_CODE_:norma:851502:
  bombo.trigger();

  setupNormalesVariables();
  setupSimWave();

  Modos.setVisible(false);
  Modos.noLoop();

  Normales.setVisible(true);
  Normales.loop();
} //_CODE_:norma:851502:

public void frec_libre(GImageButton source, GEvent event) { //_CODE_:simu:673019:
  bombo.trigger();

  setupSimWave();
  setupSimVariables();

  Modos.setVisible(false);
  Modos.noLoop();

  Simu.loop();
  Simu.setVisible(true);
} //_CODE_:simu:673019:

synchronized public void Normales_draw(PApplet appc, GWinData data) { //_CODE_:Normales:690521:

  // GUI

  Normales.image(fondo_armo, 0, 0);
  Normales.image(pantalla, 1050, 245);

  NormalWaveRefresh(); // Calculo de la armonica

  drawSim(Normales); // Dibujo de la onda

  //Subrutina para la pantalla de datos
  dataScreen(Normales);
} //_CODE_:Normales:690521:

public void normal_to_menu(GImageButton source, GEvent event) { //_CODE_:normal2menu:814459:
  bombo.trigger();
  Normales.setVisible(false);
  Normales.noLoop();
  getSurface().setVisible(true);
} //_CODE_:normal2menu:814459:

public void armo_slider(GCustomSlider source, GEvent event) { //_CODE_:armo_sl:808710:
  armo=armo_sl.getValueI();
} //_CODE_:armo_sl:808710:

public void tens_slider_2(GCustomSlider source, GEvent event) { //_CODE_:tens_sl_2:433728:
  tens=tens_sl_2.getValueF();
} //_CODE_:tens_sl_2:433728:

public void despausa_normales(GImageButton source, GEvent event) { //_CODE_:despau_norm:762359:
  btn2.trigger();
  Normales.loop();

  pau_norm.setVisible(true);
  despau_norm.setVisible(false);
} //_CODE_:despau_norm:762359:

public void pausa_normales(GImageButton source, GEvent event) { //_CODE_:pau_norm:824120:
  btn2.trigger();
  Normales.noLoop();
  pau_norm.setVisible(false);
  despau_norm.setVisible(true);
} //_CODE_:pau_norm:824120:

public void niu_slider_2(GCustomSlider source, GEvent event) { //_CODE_:dens_sl_2:428542:
  niu=dens_sl_2.getValueF();
} //_CODE_:dens_sl_2:428542:

public void amp_slider_2(GCustomSlider source, GEvent event) { //_CODE_:amp_sl_2:629305:
  amp=amp_sl_2.getValueF();
} //_CODE_:amp_sl_2:629305:

synchronized public void user_draw(PApplet appc, GWinData data) { //_CODE_:UserGUI:871305:
  UserGUI.image(userGUI, 0, 0);

  username.setFont(new Font("Calibri Bold", Font.PLAIN, 65));
  username.setTextBold();
} //_CODE_:UserGUI:871305:

public void adduser(GTextField source, GEvent event) { //_CODE_:username:362377:
} //_CODE_:username:362377:

public void Agregar_y_Jugar(GImageButton source, GEvent event) { //_CODE_:agUser:927073:
  bombo.trigger();
  if (username.getText().isBlank()) {
    UserNScore[0][pI]="Jugador No. "+(pI+1);
  } else {
    UserNScore[0][pI]=username.getText();
  }
  username.setText("");


  UserGUI.setVisible(false);
  UserGUI.noLoop();

  Instru.setVisible(true);
  Instru.loop();
} //_CODE_:agUser:927073:

synchronized public void leaderboard_draw(PApplet appc, GWinData data) { //_CODE_:Leaderboard:244264:
  Leaderboard.image(ldb, 0, 0);

  leaderboard();
} //_CODE_:Leaderboard:244264:

public void ldb_to_menu(GImageButton source, GEvent event) { //_CODE_:b_menu:614315:
  pI++;

  bombo.trigger();
  Leaderboard.setVisible(false);
  Leaderboard.noLoop();

  getSurface().setVisible(true);
} //_CODE_:b_menu:614315:



// Create all the GUI controls.
// autogenerated do not edit
public void createGUI() {
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  imgButton1 = new GImageButton(this, 400, 307, 490, 78, new String[] { "simfondo.png", "simclicked.png", "sim.png" } );
  imgButton1.addEventHandler(this, "bsim_click");
  imgButton2 = new GImageButton(this, 400, 426, 490, 78, new String[] { "jugfondo.png", "jugclicked.png", "jugclicked.png" } );
  imgButton2.addEventHandler(this, "bplay_click");
  ayuda = new GImageButton(this, 400, 546, 490, 78, new String[] { "ayudoff.png", "ayudclicked.png", "ayudoff.png" } );
  ayuda.addEventHandler(this, "ayuda_click1");
  Simu = GWindow.getWindow(this, "simulacion", 0, 0, 1280, 720, JAVA2D);
  Simu.noLoop();
  Simu.setActionOnClose(G4P.EXIT_APP);
  Simu.addDrawHandler(this, "simu_draw");
  frec_sl = new GCustomSlider(Simu, 220, 580, 150, 60, "red_yellow18px");
  frec_sl.setShowValue(true);
  frec_sl.setShowLimits(true);
  frec_sl.setLimits(0.0f, 0.0f, 4.0f);
  frec_sl.setShowTicks(true);
  frec_sl.setEasing(4.0f);
  frec_sl.setNumberFormat(G4P.DECIMAL, 2);
  frec_sl.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  frec_sl.setOpaque(true);
  frec_sl.addEventHandler(this, "frecuencia_sl");
  lon_sl = new GCustomSlider(Simu, 580, 580, 150, 60, "red_yellow18px");
  lon_sl.setShowValue(true);
  lon_sl.setShowLimits(true);
  lon_sl.setLimits(3, 3, 40);
  lon_sl.setShowTicks(true);
  lon_sl.setEasing(4.0f);
  lon_sl.setNumberFormat(G4P.INTEGER, 0);
  lon_sl.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  lon_sl.setOpaque(true);
  lon_sl.addEventHandler(this, "longitud_sl");
  amp_sl = new GCustomSlider(Simu, 910, 580, 150, 60, "red_yellow18px");
  amp_sl.setShowValue(true);
  amp_sl.setShowLimits(true);
  amp_sl.setLimits(0.0f, 0.0f, 100.0f);
  amp_sl.setShowTicks(true);
  amp_sl.setEasing(4.0f);
  amp_sl.setNumberFormat(G4P.DECIMAL, 2);
  amp_sl.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  amp_sl.setOpaque(true);
  amp_sl.addEventHandler(this, "amplitud_sl");
  mostIncid = new GImageToggleButton(Simu, 1170, 50);
  mostIncid.addEventHandler(this, "mostInc");
  mostRefle = new GImageToggleButton(Simu, 1170, 120);
  mostRefle.addEventHandler(this, "mostRefe");
  menuuu = new GImageButton(Simu, 1132, 469, 115, 105, new String[] { "menub.png", "menub2.png", "menub3.png" } );
  menuuu.addEventHandler(this, "simu_to_menu");
  pau = new GImageButton(Simu, 650, 50, 60, 60, new String[] { "pausa.png", "pausa.png", "pausa.png" } );
  pau.addEventHandler(this, "pausa_simu");
  reset = new GImageButton(Simu, 450, 50, 60, 60, new String[] { "reset.png", "reseton.png", "resetclicked.png" } );
  reset.addEventHandler(this, "b_reset_sim");
  despau = new GImageButton(Simu, 650, 50, 60, 60, new String[] { "despausa.png", "despausa.png", "despausa.png" } );
  despau.addEventHandler(this, "despau_simu");
  Instru = GWindow.getWindow(this, "Instrucciones", 0, 0, 1280, 720, JAVA2D);
  Instru.noLoop();
  Instru.setActionOnClose(G4P.EXIT_APP);
  Instru.addDrawHandler(this, "Instru_draw");
  der = new GImageButton(Instru, 1145, 640, 100, 60, new String[] { "csjd.png", "csj_ed.png", "csj_clickd.png" } );
  der.addEventHandler(this, "derecha");
  izq = new GImageButton(Instru, 24, 640, 100, 60, new String[] { "csjiz.png", "csj_eiz.png", "csj_clickiz.png" } );
  izq.addEventHandler(this, "izquierda");
  b_jugar = new GImageButton(Instru, 575, 587, 115, 105, new String[] { "Jugar1.png", "jugar2.png", "jugar3.png" } );
  b_jugar.addEventHandler(this, "gameplay_click1");
  Juego = GWindow.getWindow(this, "Juego", 0, 0, 1280, 720, JAVA2D);
  Juego.noLoop();
  Juego.setActionOnClose(G4P.EXIT_APP);
  Juego.addDrawHandler(this, "Juego_draw");
  DecTension = new GButton(Juego, 268, 623, 37, 40);
  DecTension.setIcon("flecha2.png", 1, GAlign.NORTH, GAlign.CENTER, GAlign.MIDDLE);
  DecTension.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  DecTension.addEventHandler(this, "DTension");
  label1 = new GLabel(Juego, 272, 674, 32, 20);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("-1");
  label1.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  label1.setOpaque(true);
  t_tens = new GTextArea(Juego, 346, 623, 50, 40, G4P.SCROLLBARS_NONE);
  t_tens.setText("1.0");
  t_tens.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  t_tens.setOpaque(true);
  t_tens.addEventHandler(this, "textarea1_change1");
  b_tens = new GButton(Juego, 346, 673, 55, 20);
  b_tens.setText("Agregar");
  b_tens.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  b_tens.addEventHandler(this, "btens");
  IncTension = new GButton(Juego, 436, 622, 38, 40);
  IncTension.setIcon("flecha.png", 1, GAlign.NORTH, GAlign.CENTER, GAlign.MIDDLE);
  IncTension.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  IncTension.addEventHandler(this, "ITension");
  label2 = new GLabel(Juego, 439, 673, 32, 20);
  label2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label2.setText("+1");
  label2.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  label2.setOpaque(true);
  DecNiu = new GButton(Juego, 552, 623, 38, 40);
  DecNiu.setIcon("flecha2.png", 1, GAlign.NORTH, GAlign.CENTER, GAlign.MIDDLE);
  DecNiu.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  DecNiu.addEventHandler(this, "DNiu");
  label3 = new GLabel(Juego, 553, 673, 32, 20);
  label3.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label3.setText("-0.02");
  label3.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  label3.setOpaque(true);
  t_niu = new GTextArea(Juego, 608, 622, 50, 40, G4P.SCROLLBARS_NONE);
  t_niu.setText("0.3");
  t_niu.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  t_niu.setOpaque(true);
  t_niu.addEventHandler(this, "textarea1_change2");
  b_niu = new GButton(Juego, 605, 674, 55, 20);
  b_niu.setText("Agregar");
  b_niu.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  b_niu.addEventHandler(this, "bniu");
  IncNiu = new GButton(Juego, 676, 623, 38, 40);
  IncNiu.setIcon("flecha.png", 1, GAlign.NORTH, GAlign.CENTER, GAlign.MIDDLE);
  IncNiu.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  IncNiu.addEventHandler(this, "INiu");
  label4 = new GLabel(Juego, 679, 673, 35, 20);
  label4.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label4.setText("+0.05");
  label4.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  label4.setOpaque(true);
  DecAmpl = new GButton(Juego, 790, 623, 38, 40);
  DecAmpl.setIcon("flecha2.png", 1, GAlign.NORTH, GAlign.CENTER, GAlign.MIDDLE);
  DecAmpl.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  DecAmpl.addEventHandler(this, "DAmpl");
  label5 = new GLabel(Juego, 792, 673, 31, 20);
  label5.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label5.setText("-1");
  label5.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  label5.setOpaque(true);
  t_amp = new GTextArea(Juego, 868, 623, 50, 40, G4P.SCROLLBARS_NONE);
  t_amp.setText("5.0");
  t_amp.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  t_amp.setOpaque(true);
  t_amp.addEventHandler(this, "textarea1_change3");
  b_amp = new GButton(Juego, 867, 673, 55, 20);
  b_amp.setText("Agregar");
  b_amp.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  b_amp.addEventHandler(this, "bamp");
  IncAmpl = new GButton(Juego, 957, 623, 38, 40);
  IncAmpl.setIcon("flecha.png", 1, GAlign.NORTH, GAlign.CENTER, GAlign.MIDDLE);
  IncAmpl.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  IncAmpl.addEventHandler(this, "IAmp");
  label6 = new GLabel(Juego, 960, 673, 32, 20);
  label6.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label6.setText("+5");
  label6.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  label6.setOpaque(true);
  menuu = new GImageButton(Juego, 1154, 394, 115, 105, new String[] { "menub.png", "menub2.png", "menub3.png" } );
  menuu.addEventHandler(this, "jugar_to_menu");
  verify = new GImageButton(Juego, 1153, 213, 115, 105, new String[] { "v1.png", "v2.png", "v3.png" } );
  verify.addEventHandler(this, "verii");
  Puntaje = GWindow.getWindow(this, "Puntaje", 0, 0, 1280, 720, JAVA2D);
  Puntaje.noLoop();
  Puntaje.setActionOnClose(G4P.EXIT_APP);
  Puntaje.addDrawHandler(this, "Puntaje_draw");
  b_menuPuntaje = new GImageButton(Puntaje, 360, 510, 115, 105, new String[] { "menub.png", "menub2.png", "menub3.png" } );
  b_menuPuntaje.addEventHandler(this, "punt_to_menu");
  b_jugarPuntaje = new GImageButton(Puntaje, 800, 510, 115, 105, new String[] { "Jugar1.png", "jugar2.png", "jugar3.png" } );
  b_jugarPuntaje.addEventHandler(this, "jugarPuntaje");
  b_ldb = new GImageButton(Puntaje, 580, 510, 115, 105, new String[] { "tboff.png", "tbon.png", "tbcl.png" } );
  b_ldb.addEventHandler(this, "pun_to_ldb");
  Ayuda = GWindow.getWindow(this, "Ayuda", 0, 0, 1280, 720, JAVA2D);
  Ayuda.noLoop();
  Ayuda.setActionOnClose(G4P.CLOSE_WINDOW);
  Ayuda.addDrawHandler(this, "help_draw1");
  dere = new GImageButton(Ayuda, 1169, 648, 100, 60, new String[] { "csjd.png", "csj_ed.png", "csj_clickd.png" } );
  dere.addEventHandler(this, "derecha_click1");
  izqui = new GImageButton(Ayuda, 18, 648, 100, 60, new String[] { "csjiz.png", "csj_eiz.png", "csj_clickiz.png" } );
  izqui.addEventHandler(this, "izquierda_click1");
  menub = new GImageButton(Ayuda, 600, 600, 115, 105, new String[] { "menub.png", "menub2.png", "menub3.png" } );
  menub.addEventHandler(this, "ayud_to_menu");
  Modos = GWindow.getWindow(this, "Modos", 0, 0, 1280, 720, JAVA2D);
  Modos.noLoop();
  Modos.setActionOnClose(G4P.CLOSE_WINDOW);
  Modos.addDrawHandler(this, "Modos_draw");
  norma = new GImageButton(Modos, 343, 306, new String[] { "modnormaloff.png", "modnormalon.png", "modnormalon.png" } );
  norma.addEventHandler(this, "mod_normal");
  simu = new GImageButton(Modos, 343, 441, new String[] { "freclibreoff.png", "freclibreon.png", "freclibreon.png" } );
  simu.addEventHandler(this, "frec_libre");
  Normales = GWindow.getWindow(this, "Normales", 0, 0, 1280, 720, JAVA2D);
  Normales.noLoop();
  Normales.setActionOnClose(G4P.CLOSE_WINDOW);
  Normales.addDrawHandler(this, "Normales_draw");
  normal2menu = new GImageButton(Normales, 1132, 469, 115, 105, new String[] { "menub.png", "menub2.png", "menub3.png" } );
  normal2menu.addEventHandler(this, "normal_to_menu");
  armo_sl = new GCustomSlider(Normales, 230, 580, 150, 60, "red_yellow18px");
  armo_sl.setShowValue(true);
  armo_sl.setShowLimits(true);
  armo_sl.setLimits(1, 1, 6);
  armo_sl.setShowTicks(true);
  armo_sl.setEasing(4.0f);
  armo_sl.setNumberFormat(G4P.INTEGER, 0);
  armo_sl.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  armo_sl.setOpaque(true);
  armo_sl.addEventHandler(this, "armo_slider");
  tens_sl_2 = new GCustomSlider(Normales, 450, 580, 150, 60, "red_yellow18px");
  tens_sl_2.setShowValue(true);
  tens_sl_2.setShowLimits(true);
  tens_sl_2.setLimits(1.0f, 1.0f, 25.0f);
  tens_sl_2.setShowTicks(true);
  tens_sl_2.setEasing(4.0f);
  tens_sl_2.setNumberFormat(G4P.DECIMAL, 0);
  tens_sl_2.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  tens_sl_2.setOpaque(true);
  tens_sl_2.addEventHandler(this, "tens_slider_2");
  despau_norm = new GImageButton(Normales, 610, 50, 60, 60, new String[] { "pausa.png", "pausa.png", "pausa.png" } );
  despau_norm.addEventHandler(this, "despausa_normales");
  pau_norm = new GImageButton(Normales, 610, 50, 60, 60, new String[] { "despausa.png", "despausa.png", "despausa.png" } );
  pau_norm.addEventHandler(this, "pausa_normales");
  dens_sl_2 = new GCustomSlider(Normales, 670, 580, 150, 60, "red_yellow18px");
  dens_sl_2.setShowValue(true);
  dens_sl_2.setShowLimits(true);
  dens_sl_2.setLimits(0.1f, 0.1f, 0.8f);
  dens_sl_2.setShowTicks(true);
  dens_sl_2.setEasing(4.0f);
  dens_sl_2.setNumberFormat(G4P.DECIMAL, 2);
  dens_sl_2.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  dens_sl_2.setOpaque(true);
  dens_sl_2.addEventHandler(this, "niu_slider_2");
  amp_sl_2 = new GCustomSlider(Normales, 910, 580, 150, 60, "red_yellow18px");
  amp_sl_2.setShowValue(true);
  amp_sl_2.setShowLimits(true);
  amp_sl_2.setLimits(1.0f, 0.0f, 100.0f);
  amp_sl_2.setShowTicks(true);
  amp_sl_2.setEasing(4.0f);
  amp_sl_2.setNumberFormat(G4P.DECIMAL, 2);
  amp_sl_2.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  amp_sl_2.setOpaque(true);
  amp_sl_2.addEventHandler(this, "amp_slider_2");
  UserGUI = GWindow.getWindow(this, "Ingreso Usuario", 0, 0, 1280, 720, JAVA2D);
  UserGUI.noLoop();
  UserGUI.setActionOnClose(G4P.EXIT_APP);
  UserGUI.addDrawHandler(this, "user_draw");
  username = new GTextField(UserGUI, 290, 310, 690, 61, G4P.SCROLLBARS_NONE);
  username.setPromptText("         // Escriba aqui //");
  username.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  username.setOpaque(false);
  username.addEventHandler(this, "adduser");
  agUser = new GImageButton(UserGUI, 569, 497, 115, 105, new String[] { "agoff.png", "agon.png", "agcl.png" } );
  agUser.addEventHandler(this, "Agregar_y_Jugar");
  Leaderboard = GWindow.getWindow(this, "Tablero de puntajes", 0, 0, 1280, 720, JAVA2D);
  Leaderboard.noLoop();
  Leaderboard.setActionOnClose(G4P.EXIT_APP);
  Leaderboard.addDrawHandler(this, "leaderboard_draw");
  b_menu = new GImageButton(Leaderboard, 604, 570, 115, 105, new String[] { "menub.png", "menub2.png", "menub3.png" } );
  b_menu.addEventHandler(this, "ldb_to_menu");
  Simu.loop();
  Instru.loop();
  Juego.loop();
  Puntaje.loop();
  Ayuda.loop();
  Modos.loop();
  Normales.loop();
  UserGUI.loop();
  Leaderboard.loop();
}

// Variable declarations
// autogenerated do not edit
GImageButton imgButton1;
GImageButton imgButton2;
GImageButton ayuda;
GWindow Simu;
GCustomSlider frec_sl;
GCustomSlider lon_sl;
GCustomSlider amp_sl;
GImageToggleButton mostIncid;
GImageToggleButton mostRefle;
GImageButton menuuu;
GImageButton pau;
GImageButton reset;
GImageButton despau;
GWindow Instru;
GImageButton der;
GImageButton izq;
GImageButton b_jugar;
GWindow Juego;
GButton DecTension;
GLabel label1;
GTextArea t_tens;
GButton b_tens;
GButton IncTension;
GLabel label2;
GButton DecNiu;
GLabel label3;
GTextArea t_niu;
GButton b_niu;
GButton IncNiu;
GLabel label4;
GButton DecAmpl;
GLabel label5;
GTextArea t_amp;
GButton b_amp;
GButton IncAmpl;
GLabel label6;
GImageButton menuu;
GImageButton verify;
GWindow Puntaje;
GImageButton b_menuPuntaje;
GImageButton b_jugarPuntaje;
GImageButton b_ldb;
GWindow Ayuda;
GImageButton dere;
GImageButton izqui;
GImageButton menub;
GWindow Modos;
GImageButton norma;
GImageButton simu;
GWindow Normales;
GImageButton normal2menu;
GCustomSlider armo_sl;
GCustomSlider tens_sl_2;
GImageButton despau_norm;
GImageButton pau_norm;
GCustomSlider dens_sl_2;
GCustomSlider amp_sl_2;
GWindow UserGUI;
GTextField username;
GImageButton agUser;
GWindow Leaderboard;
GImageButton b_menu;


  public void settings() { size(1280, 720); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "simulacion_onda" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
